CREATE TABLE COURSE (
    ID INT NOT NULL UNIQUE,
    COURSE_ID VARCHAR(10) NOT NULL,
    NAME VARCHAR(80) NOT NULL,
    CREDIT INT NOT NULL CHECK(CREDIT >= 1 AND CREDIT <= 4),
    LEVEL INT NOT NULL CHECK(LEVEL >= 1 AND LEVEL <= 3),
    INFO VARCHAR(1024),
    
    PRIMARY KEY(ID)
);

CREATE TABLE USERS (
    ID INT NOT NULL UNIQUE,
    NAME VARCHAR(80) NOT NULL,
    EMAIL VARCHAR(50) NOT NULL UNIQUE,
    PASSWORD VARCHAR(50) NOT NULL,

    PRIMARY KEY(EMAIL)
);

CREATE TABLE STUDENT (
    ID INT NOT NULL UNIQUE,
    AGE INT NOT NULL,
    DOB VARCHAR(10) NOT NULL,
    QUALIFICATIONS varchar(20) NOT NULL,
    GUARDIAN_NAME VARCHAR(50) NOT NULL,
    GENDER VARCHAR(1) NOT NULL CHECK(GENDER = 'M' OR GENDER = 'F' OR GENDER = 'O'),

    FOREIGN KEY(ID) REFERENCES USERS(ID)
);

CREATE TABLE PROFESSOR (
    ID INT NOT NULL UNIQUE,
    QUALIFICATIONS VARCHAR(50) NOT NULL,
    OFFICE_HOURS VARCHAR(50) NOT NULL,

    FOREIGN KEY(ID) REFERENCES USERS(ID)
);

CREATE TABLE TEACHING_ASSISTANT (
    ID INT NOT NULL UNIQUE,
    COURSE_ID INT NOT NULL UNIQUE,
    OFFICE_HOURS VARCHAR(50) NOT NULL,

    FOREIGN KEY(ID) REFERENCES USERS(ID),
    FOREIGN KEY(COURSE_ID) REFERENCES COURSE(ID)
);

CREATE TABLE PRIVATE_TUTOR (
    ID INT NOT NULL UNIQUE,
    COURSE_ID INT NOT NULL UNIQUE,
    QUALIFICATIONS VARCHAR(50) NOT NULL,
    FEES INT NOT NULL CHECK(FEES >= 1000),

    FOREIGN KEY(ID) REFERENCES USERS(ID),
    FOREIGN KEY(COURSE_ID) REFERENCES COURSE(ID)
);

CREATE TABLE UNIVERSITY (
    ID INT NOT NULL UNIQUE,
    LOCATION VARCHAR(50) NOT NULL,
    INFO VARCHAR(1024),
    EDUCAMP_RANKING INT NOT NULL,

    FOREIGN KEY(ID) REFERENCES USERS(ID)
);

CREATE TABLE UNIVERSITY_DATA (
    COURSE_ID INT NOT NULL UNIQUE,
    PROFESSOR_ID INT NOT NULL UNIQUE,
    UNIVERSITY_ID INT NOT NULL,

    FOREIGN KEY(COURSE_ID) REFERENCES COURSE(ID),
    FOREIGN KEY(PROFESSOR_ID) REFERENCES PROFESSOR(ID),
    FOREIGN KEY(UNIVERSITY_ID) REFERENCES UNIVERSITY(ID)
);

CREATE TABLE COURSE_DATA (
    COURSE_ID INT NOT NULL,
    STUDENT_ID INT NOT NULL,
    GRADE INT CHECK(GRADE >=0 AND GRADE <=10),
    YEAR INT CHECK(YEAR>1900),

    UNIQUE(COURSE_ID, STUDENT_ID),
    FOREIGN KEY(COURSE_ID) REFERENCES COURSE(ID),
    FOREIGN KEY(STUDENT_ID) REFERENCES STUDENT(ID)
);

CREATE TABLE COURSE_PRE_REQUISITES (
    COURSE_ID INT NOT NULL,
    PRE_REQUISITE_COURSE_ID INT NOT NULL,

    UNIQUE (COURSE_ID, PRE_REQUISITE_COURSE_ID),
    FOREIGN KEY(COURSE_ID) REFERENCES COURSE(ID),
    FOREIGN KEY(PRE_REQUISITE_COURSE_ID) REFERENCES COURSE(ID)
);

CREATE TABLE TEACHING_ASSISTANT_DATA (
    TEACHING_ASSISTANT_ID INT NOT NULL,
    PROFESSOR_ID INT NOT NULL,
    STUDENT_ID INT NOT NULL,
    
    UNIQUE(TEACHING_ASSISTANT_ID, PROFESSOR_ID, STUDENT_ID),

    FOREIGN KEY(STUDENT_ID) REFERENCES STUDENT(ID),
    FOREIGN KEY(PROFESSOR_ID) REFERENCES PROFESSOR(ID),
    FOREIGN KEY(TEACHING_ASSISTANT_ID) REFERENCES TEACHING_ASSISTANT(ID)
);

CREATE TABLE PRIVATE_TUTOR_DATA (
    PRIVATE_TUTOR_ID INT NOT NULL,
    STUDENT_ID INT NOT NULL,

    UNIQUE (PRIVATE_TUTOR_ID, STUDENT_ID),
    FOREIGN KEY(STUDENT_ID) REFERENCES STUDENT(ID),
    FOREIGN KEY(PRIVATE_TUTOR_ID) REFERENCES PRIVATE_TUTOR(ID)
);

CREATE TABLE ADMINISTRATOR (
    ID INT NOT NULL UNIQUE,

    FOREIGN KEY(ID) REFERENCES USERS(ID)
);
